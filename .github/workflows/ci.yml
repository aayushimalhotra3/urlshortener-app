name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run go fmt
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          exit 1
        fi
    
    - name: Run go vet
      run: go vet ./...
    
    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...
    
    - name: Generate coverage report
      run: go tool cover -html=coverage.out -o coverage.html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
    
    - name: Run security scan
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: './...'

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Build application
      run: |
        CGO_ENABLED=1 GOOS=linux go build -a -installsuffix cgo -o bin/urlshortener cmd/shortener/main.go
        chmod +x bin/urlshortener
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: urlshortener-binary
        path: bin/urlshortener

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: urlshortener:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        load: true
    
    - name: Test Docker image
      run: |
        docker run -d --name test-container -p 8081:8081 urlshortener:latest
        sleep 10
        curl -f http://localhost:8081/health || exit 1
        docker stop test-container
        docker rm test-container
    
    - name: Login to GitHub Container Registry
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Push to GitHub Container Registry
      if: github.ref == 'refs/heads/main'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ghcr.io/${{ github.repository }}:latest
          ghcr.io/${{ github.repository }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [docker]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'e2e/package-lock.json'
    
    - name: Install Playwright dependencies
      working-directory: ./e2e
      run: |
        npm ci
        npx playwright install --with-deps
    
    - name: Start application with Docker Compose
      run: |
        docker-compose up -d urlshortener
        sleep 15
        curl -f http://localhost:8081/health || exit 1
    
    - name: Run Playwright tests
      working-directory: ./e2e
      run: npx playwright test
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: e2e/playwright-report/
        retention-days: 30
    
    - name: Stop Docker Compose
      if: always()
      run: docker-compose down

  deploy:
    name: "Deploy to Production"
    runs-on: ubuntu-latest
    needs: [test, lint, build, docker, e2e-test]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Fly.io CLI
        uses: superfly/flyctl-actions/setup-flyctl@master
        if: env.FLY_API_TOKEN != ''

      - name: Deploy to Fly.io
        if: env.FLY_API_TOKEN != ''
        run: |
          echo "ðŸš€ Deploying to Fly.io..."
          flyctl deploy --remote-only --app ${{ secrets.FLY_APP_NAME || 'urlshortener-app' }}
          echo "âœ… Fly.io deployment completed!"
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Deploy to Heroku
        if: env.HEROKU_API_KEY != '' && env.FLY_API_TOKEN == ''
        uses: akhileshns/heroku-deploy@v3.12.14
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          usedocker: true
          docker_heroku_process_type: web
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}

      - name: Deployment Summary
        run: |
          echo "ðŸŽ‰ Production deployment completed!"
          echo "ðŸ“Š Deployment details:"
          echo "- Platform: ${{ env.FLY_API_TOKEN != '' && 'Fly.io' || env.HEROKU_API_KEY != '' && 'Heroku' || 'Manual' }}"
          echo "- Commit: ${{ github.sha }}"
          echo "- Branch: ${{ github.ref_name }}"
          echo "- Triggered by: ${{ github.actor }}"
          echo "ðŸ”— Check your application at the deployed URL"